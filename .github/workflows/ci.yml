name: Consolidated CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "ci-cd-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true
    
    - name: Run Prettier check
      run: npm run format:check
      continue-on-error: true
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      if: matrix.node-version == '20.x'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/

  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate API documentation
      run: |
        # ÂàõÂª∫ÊñáÊ°£ÁõÆÂΩïÁªìÊûÑ
        mkdir -p _site/docs
        
        # Â§çÂà∂Áé∞ÊúâÊñáÊ°£
        cp README.md _site/
        cp INSTALLATION.md _site/
        cp -r docs/* _site/docs/
        
        # ÂàõÂª∫Á¥¢ÂºïÈ°µÈù¢
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>NewRelic MCP Server Documentation</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                .container { max-width: 800px; margin: 0 auto; }
                h1 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }
                .nav { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .nav a { display: block; margin: 10px 0; color: #007acc; text-decoration: none; }
                .nav a:hover { text-decoration: underline; }
                .badge { background: #007acc; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>NewRelic MCP Server <span class="badge">v1.0.0</span></h1>
                <p>A Model Context Protocol (MCP) server for NewRelic integration with comprehensive monitoring and querying capabilities.</p>
                
                <div class="nav">
                    <h3>üìö Documentation</h3>
                    <a href="README.html">üìñ README</a>
                    <a href="INSTALLATION.html">üöÄ Installation Guide</a>
                    <a href="docs/api.html">üîß API Documentation</a>
                    <a href="docs/README.html">üìã Developer Guide</a>
                </div>
                
                <div class="nav">
                    <h3>üîó Links</h3>
                    <a href="https://github.com/buallen/newrelic-mcp-server" target="_blank">GitHub Repository</a>
                    <a href="https://hub.docker.com/r/buallen/newrelic-mcp-server" target="_blank">Docker Hub</a>
                    <a href="https://www.npmjs.com/package/newrelic-mcp-server" target="_blank">NPM Package</a>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # ËΩ¨Êç¢ Markdown ‰∏∫ HTML
        for file in _site/*.md _site/docs/*.md; do
          if [ -f "$file" ]; then
            base=$(basename "$file" .md)
            dir=$(dirname "$file")
            cat > "$dir/$base.html" << EOF
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>$base - NewRelic MCP Server</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; line-height: 1.6; }
                .container { max-width: 800px; margin: 0 auto; }
                pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
                code { background: #f8f9fa; padding: 2px 4px; border-radius: 3px; }
                h1, h2, h3 { color: #333; }
                a { color: #007acc; }
                .back-link { margin-bottom: 20px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="back-link"><a href="../index.html">‚Üê Back to Documentation</a></div>
                <div id="content"></div>
            </div>
            <script>
                // ÁÆÄÂçïÁöÑ Markdown Ê∏≤Êüì
                fetch('$base.md')
                  .then(response => response.text())
                  .then(text => {
                    document.getElementById('content').innerHTML = 
                      text.replace(/^# (.*$)/gim, '<h1>$1</h1>')
                          .replace(/^## (.*$)/gim, '<h2>$1</h2>')
                          .replace(/^### (.*$)/gim, '<h3>$1</h3>')
                          .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
                          .replace(/\*(.*)\*/gim, '<em>$1</em>')
                          .replace(/\`\`\`([^`]+)\`\`\`/gim, '<pre><code>$1</code></pre>')
                          .replace(/\`([^`]+)\`/gim, '<code>$1</code>')
                          .replace(/\n/gim, '<br>');
                  });
            </script>
        </body>
        </html>
        EOF
          fi
        done
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: buallen/newrelic-mcp-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/
    
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # ÂàõÂª∫ÂèëÂ∏ÉÂåÖ
        npm pack
        
        # Ëé∑ÂèñÁâàÊú¨Âè∑
        VERSION=$(node -p "require('./package.json').version")
        
        # ÂàõÂª∫ GitHub Release
        gh release create "v$VERSION" \
          --title "Release v$VERSION" \
          --notes "Automated release v$VERSION" \
          --latest \
          *.tgz